#!/usr/bin/env bash -x

# this will bump the npm patch version
# it commits the code to the current working branch, but does not push to remote

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
CWD=$(pwd)
DEFAULT_COMMIT_MSG="pre-release version"

COMMIT_MSG=${@:-$DEFAULT_COMMIT_MSG}

cd "${DIR}/../"

function usage() {
    cat <<USAGE
    Usage: $0 [--preid "versionName"]

    Options:
        --preid         pass the name of the new pre-release version ie "epicName"
USAGE
    exit 1
}

# if no arguments are provided, return usage function
if [ $# -eq 1 ]; then
    usage # run usage function
    exit 1
fi

# check for agument
while [[ $# -gt 0 ]]; do
  case "$1" in
    --preid)
      preIdName=$2
      shift 2
      ;;

    *)
      echo "Missing argument to set the pre-release version"
      usage
      exit 1;
      ;;
  esac
done

function checkOutput() {
  if [ "$?" != "0" ]; then
    echo "Something went wrong... Exiting"
    cd "$CWD"
    exit 1
  fi
}

echo "Building production bundle for pre-release version "$preIdName""
yarn install
checkOutput $?

yarn build:prod
checkOutput $?

echo "Staging all files for git..."
git add .
checkOutput $?

echo "Committing with message: \"${COMMIT_MSG}\"..."
git commit -m "$COMMIT_MSG"
checkOutput $?

echo "Creating npm patch version..."
npm version prerelease --preid="$preIdName"
checkOutput $?

echo "Publishing npm package..."
npm publish
checkOutput $?

cd "$CWD"
